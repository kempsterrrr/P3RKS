import type { NextPage } from "next";
import useStore from "../stores/useStore";
import { useState } from "react";
import Head from "next/head";
import { useContractRead } from "wagmi";
import GenisisContract from "../abis/GenesisContract.json";
import { Notification } from "../components/Notification";
import useSWR from "swr";

const styles = {
  container: "p-5 flex flex-col space-y-5",
  title: "text-3xl font-bold m-[0px]",
  itemsContainer:
    "space-y-5 md:grid md:grid-cols-2 md:gap-x-6 md:gap-y-6 md:space-y-0 lg:grid-cols-3 lg:gap-x-8 lg:gap-y-8",
  item: "p-5 border-[1px] shadow rounded-lg flex flex-col space-y-5",
  itemTopContainer: "grow space-y-3",
  itemImage: "object-cover",
  itemTitle: "text-lg leading-6 font-medium space-y-1",
  itemInfo: "text-lg text-gray-500",
  button:
    "px-6 py-3 w-full h-[60px] cursor:pointer inline-flex justify-center items-center rounded-md border border-transparent bg-black text-base text-white font-medium shadow-sm hover:border-2 hover:border-black hover:bg-white hover:text-black focus:outline-black focus:ring-2 focus:ring-black focus:ring-offset-2",
};

const Benefits: NextPage = () => {
  const { data: benefits, error: benefitsError } = useSWR("/api/benefits");
  const { walletAddress } = useStore((state) => state.user);
  const [ownsNFT, setOwnsNFT] = useState(false);
  const [error, setError] = useState({ show: false, title: "", message: "" });

  const { isLoading } = useContractRead(
    {
      addressOrName: "0x25ed58c027921e14d86380ea2646e3a1b5c55a8b",
      contractInterface: GenisisContract.abi,
    },
    "balanceOf",
    {
      enabled: !!walletAddress,
      args: walletAddress,
      onSuccess(data) {
        if (parseInt(data._hex) > 0) setOwnsNFT(true);
        else {
          setOwnsNFT(false);
          setError({
            show: true,
            title: "DEVELOPER DAO NFT NOT FOUND",
            message: "To redeem any benefits you need a Developer DAO NFT.",
          });
        }
      },
      onError(error) {
        setOwnsNFT(false);
        setError({
          show: true,
          title: "SOMETHING WENT WRONG",
          message: error.toString(),
        });
      },
    }
  );

  if (isLoading || !benefits) return <h1>Loading...</h1>;

  if (benefitsError) return <h1>Error during fetching benefits</h1>;

  return (
    <>
      <Head>
        <title>Benefits - B3NZ</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.container}>
        <h2 className={styles.title}>All offers</h2>
        <ul role="list" className={styles.itemsContainer}>
          {benefits.map((item: any, index: number) => (
            <li className={styles.item} key={index}>
              <div className={styles.itemTopContainer}>
                <img
                  className={styles.itemImage}
                  src={item.fields["Partner Thumbnail"]}
                  alt=""
                />
                <div>
                  <h3 className={styles.itemTitle}>
                    {`About ${item.fields["Partner Name"]}`.toUpperCase()}
                  </h3>
                  <p className={styles.itemInfo}>
                    {item.fields["Partner About"]}
                  </p>
                </div>
                <div>
                  <h3 className={styles.itemTitle}>Benefit</h3>
                  <p className={styles.itemInfo}>{item.fields["Benefit"]}</p>
                </div>
              </div>
              {ownsNFT && (
                <a href={item.fields["Benefit Link"]} className={styles.button}>
                  Redeem
                </a>
              )}
            </li>
          ))}
        </ul>
        {error.show && (
          <Notification
            isError={true}
            title={error.title}
            body={error.message}
          />
        )}
      </main>
    </>
  );
};

export default Benefits;
